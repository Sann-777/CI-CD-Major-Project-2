version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: studynotion-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    networks:
      - studynotion-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: microservices/api-gateway/Dockerfile
    container_name: studynotion-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - microservices/api-gateway/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: microservices/auth-service/Dockerfile
    container_name: studynotion-auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - microservices/auth-service/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Course Service
  course-service:
    build:
      context: .
      dockerfile: microservices/course-service/Dockerfile
    container_name: studynotion-course-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    env_file:
      - microservices/course-service/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Profile Service
  profile-service:
    build:
      context: .
      dockerfile: microservices/profile-service/Dockerfile
    container_name: studynotion-profile-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    env_file:
      - microservices/profile-service/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Rating Service
  rating-service:
    build:
      context: .
      dockerfile: microservices/rating-service/Dockerfile
    container_name: studynotion-rating-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    env_file:
      - microservices/rating-service/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Media Service
  media-service:
    build:
      context: .
      dockerfile: microservices/media-service/Dockerfile
    container_name: studynotion-media-service
    restart: unless-stopped
    ports:
      - "3006:3006"
    env_file:
      - microservices/media-service/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: microservices/notification-service/Dockerfile
    container_name: studynotion-notification-service
    restart: unless-stopped
    ports:
      - "3007:3007"
    env_file:
      - microservices/notification-service/.env.docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend-microservice/Dockerfile
    container_name: studynotion-frontend
    restart: unless-stopped
    ports:
      - "3008:3008"
    env_file:
      - frontend-microservice/.env.docker
    depends_on:
      - api-gateway
    networks:
      - studynotion-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:

networks:
  studynotion-network:
    driver: bridge
