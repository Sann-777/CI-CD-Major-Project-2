{
  "name": "studynotion-microservices",
  "description": "StudyNotion EdTech Platform - Microservices Architecture",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "bootstrap": "npm install && cd frontend-microservice && npm install && cd ../microservices && npm run install:all",
    
    "install:all": "npm run install:frontend && npm run install:services:all",
    "install:frontend": "cd frontend-microservice && npm install",
    "install:services:all": "cd microservices && npm install",
    "install:service": "cd microservices/$npm_config_service && npm install",
    "lint:services:ready": "npx concurrently -n \"gateway,auth,course,payment,profile,rating,media,notification\" -c \"bgGreen,bgYellow,bgMagenta,bgCyan,bgRed,bgWhite,bgGray,bgBlueBright\" \"cd microservices/api-gateway && npm run lint || true\" \"cd microservices/auth-service && npm run lint || true\" \"cd microservices/course-service && npm run lint || true\" \"cd microservices/payment-service && npm run lint || true\" \"cd microservices/profile-service && npm run lint || true\" \"cd microservices/rating-service && npm run lint || true\" \"cd microservices/media-service && npm run lint || true\" \"cd microservices/notification-service && npm run lint || true\"",
    "lint:service": "cd microservices/$npm_config_service && npm run lint",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "start:all": "npx concurrently -n \"gateway,auth,course,payment,profile,rating,media,notification\" -c \"bgGreen,bgYellow,bgMagenta,bgCyan,bgRed,bgWhite,bgGray,bgBlueBright\" \"cd microservices/api-gateway && npm start\" \"cd microservices/auth-service && npm start\" \"cd microservices/course-service && npm start\" \"cd microservices/payment-service && npm start\" \"cd microservices/profile-service && npm start\" \"cd microservices/rating-service && npm start\" \"cd microservices/media-service && npm start\" \"cd microservices/notification-service && npm start\" \"cd frontend-microservice && npm run dev\"",
    "start:service": "cd microservices/$npm_config_service && npm start",
    
    "docker:build": "docker-compose -f microservices/docker-compose.yml build",
    "docker:up": "docker-compose -f microservices/docker-compose.yml up -d",
    "docker:down": "docker-compose -f microservices/docker-compose.yml down",
    "docker:logs": "docker-compose -f microservices/docker-compose.yml logs -f",
    
    "k8s:deploy": "kubectl apply -f microservices/k8s/",
    "k8s:delete": "kubectl delete -f microservices/k8s/",
    "k8s:status": "kubectl get all -n studynotion",
    
    "legacy:start": "cd monolithic-legacy && npm start",
    "legacy:server": "cd monolithic-legacy/server && npm run dev",
    "legacy:dev": "cd monolithic-legacy && npm run dev",
    
    "clean:all": "npm run clean:frontend && npm run clean:services",
    "clean:frontend": "cd frontend-microservice && rm -rf node_modules package-lock.json && npm cache clean --force",
    "clean:services": "cd microservices && find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' + && rm -f package-lock.json && npm cache clean --force",
    "reset:all": "npm run clean:all && npm run install:all",
    
    "health:all": "npx concurrently -n \"gateway,auth,course,payment,profile,rating,media,notification\" -c \"bgGreen,bgYellow,bgMagenta,bgCyan,bgRed,bgWhite,bgGray,bgBlueBright\" \"curl -f http://localhost:3001/health || echo 'Gateway down'\" \"curl -f http://localhost:3002/health || echo 'Auth down'\" \"curl -f http://localhost:3003/health || echo 'Course down'\" \"curl -f http://localhost:3004/health || echo 'Payment down'\" \"curl -f http://localhost:3005/health || echo 'Profile down'\" \"curl -f http://localhost:3006/health || echo 'Rating down'\" \"curl -f http://localhost:3007/health || echo 'Media down'\" \"curl -f http://localhost:3008/health || echo 'Notification down'\"",
    
    "ci:setup": "bash jenkins-cache-setup.sh",
    "ci:setup-legacy": "bash setup-pipeline.sh",
    "ci:install": "npm run ci:setup && npm run install:all",
    "ci:test": "npm run ci:setup && npm run test:services:ready",
    "ci:lint": "npm run ci:setup && npm run lint:services:ready",
    "ci:full": "npm run ci:setup && npm run install:all && npm run lint:services:ready && npm run test:services:ready",
    "test": "npm run test:services:ready",
    "test:services:ready": "npx concurrently --prefix \"[{name}]\" --names \"gateway,auth,course,payment,profile,rating,media,notification\" \"cd microservices/api-gateway && npm test || true\" \"cd microservices/auth-service && npm test || true\" \"cd microservices/course-service && npm test || true\" \"cd microservices/payment-service && npm test || true\" \"cd microservices/profile-service && npm test || true\" \"cd microservices/rating-service && npm test || true\" \"cd microservices/media-service && npm test || true\" \"cd microservices/notification-service && npm test || true\"",
    "lint": "npm run lint:services:ready",
    "test:all": "concurrently \"npm run test:microservices\" \"npm run test:frontend\"",
    "test:microservices": "concurrently \"npm run test:auth\" \"npm run test:course\" \"npm run test:payment\" \"npm run test:profile\" \"npm run test:rating\" \"npm run test:media\" \"npm run test:notification\" \"npm run test:gateway\" \"npm run test:shared\"",
    "test:auth": "cd microservices/auth-service && npm test",
    "test:course": "cd microservices/course-service && npm test",
    "test:payment": "cd microservices/payment-service && npm test",
    "test:profile": "cd microservices/profile-service && npm test",
    "test:rating": "cd microservices/rating-service && npm test",
    "test:media": "cd microservices/media-service && npm test",
    "test:notification": "cd microservices/notification-service && npm test",
    "test:gateway": "cd microservices/api-gateway && npm test",
    "test:shared": "cd microservices/shared && npm test",
    "test:frontend": "cd frontend-microservice && npm test",
    "test:coverage": "npm run test:coverage:all",
    "test:coverage:all": "concurrently \"npm run test:coverage:microservices\" \"npm run test:coverage:frontend\"",
    "test:coverage:microservices": "concurrently \"npm run test:coverage:auth\" \"npm run test:coverage:course\" \"npm run test:coverage:payment\" \"npm run test:coverage:profile\" \"npm run test:coverage:rating\" \"npm run test:coverage:media\" \"npm run test:coverage:notification\" \"npm run test:coverage:gateway\" \"npm run test:coverage:shared\"",
    "test:coverage:auth": "cd microservices/auth-service && npm run test:coverage",
    "test:coverage:course": "cd microservices/course-service && npm run test:coverage",
    "test:coverage:payment": "cd microservices/payment-service && npm run test:coverage",
    "test:coverage:profile": "cd microservices/profile-service && npm run test:coverage",
    "test:coverage:rating": "cd microservices/rating-service && npm run test:coverage",
    "test:coverage:media": "cd microservices/media-service && npm run test:coverage",
    "test:coverage:notification": "cd microservices/notification-service && npm run test:coverage",
    "test:coverage:gateway": "cd microservices/api-gateway && npm run test:coverage",
    "test:coverage:shared": "cd microservices/shared && npm run test:coverage",
    "test:coverage:frontend": "cd frontend-microservice && npm run test:coverage",
    "lint:all": "concurrently \"npm run lint:microservices\" \"npm run lint:frontend\"",
    "lint:microservices": "concurrently \"npm run lint:auth\" \"npm run lint:course\" \"npm run lint:payment\" \"npm run lint:profile\" \"npm run lint:rating\" \"npm run lint:media\" \"npm run lint:notification\" \"npm run lint:gateway\"",
    "lint:auth": "cd microservices/auth-service && npm run lint",
    "lint:course": "cd microservices/course-service && npm run lint",
    "lint:payment": "cd microservices/payment-service && npm run lint",
    "lint:profile": "cd microservices/profile-service && npm run lint",
    "lint:rating": "cd microservices/rating-service && npm run lint",
    "lint:media": "cd microservices/media-service && npm run lint",
    "lint:notification": "cd microservices/notification-service && npm run lint",
    "lint:gateway": "cd microservices/api-gateway && npm run lint",
    "lint:frontend": "cd frontend-microservice && npm run lint",
    "sonar": "sonar-scanner",
    "sonar:coverage": "npm run test:coverage && npm run sonar",
    "install:all": "npm run install:microservices && npm run install:frontend && npm run install:shared",
    "install:microservices": "concurrently \"npm run install:auth\" \"npm run install:course\" \"npm run install:payment\" \"npm run install:profile\" \"npm run install:rating\" \"npm run install:media\" \"npm run install:notification\" \"npm run install:gateway\"",
    "install:auth": "cd microservices/auth-service && npm install",
    "install:course": "cd microservices/course-service && npm install",
    "install:payment": "cd microservices/payment-service && npm install",
    "install:profile": "cd microservices/profile-service && npm install",
    "install:rating": "cd microservices/rating-service && npm install",
    "install:media": "cd microservices/media-service && npm install",
    "install:notification": "cd microservices/notification-service && npm install",
    "install:gateway": "cd microservices/api-gateway && npm install",
    "install:shared": "cd microservices/shared && npm install",
    "install:frontend": "cd frontend-microservice && npm install",
    "dev": "./start-dev.sh",
    "build": "npm run build:all",
    "build:all": "concurrently \"npm run build:microservices\" \"npm run build:frontend\"",
    "build:microservices": "echo 'Microservices built via Docker'",
    "build:frontend": "cd frontend-microservice && npm run build",
    "docker:build": "./setup-docker.sh",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "k8s:deploy": "./deploy-all.sh",
    "quality:check": "npm run lint && npm run test:coverage && npm run sonar"
  },
  "devDependencies": {
    "concurrently": "^8.2.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.45.0",
    "eslint-plugin-node": "^11.1.0",
    "prettier": "^3.0.0",
    "jest": "^29.6.2",
    "supertest": "^6.3.3",
    "mongodb-memory-server": "^9.1.1",
    "sonarqube-scanner": "^3.0.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [
    "microservices",
    "edtech",
    "studynotion",
    "react",
    "nodejs",
    "mongodb",
    "kubernetes",
    "docker"
  ],
  "author": "StudyNotion Team",
  "license": "MIT"
}