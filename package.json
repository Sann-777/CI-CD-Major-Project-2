{
  "name": "studynotion-microservices",
  "description": "StudyNotion EdTech Platform - Microservices Architecture",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "preinstall": "node -e \"console.log('Installing StudyNotion EdTech Platform dependencies...')\"",
    "install:all": "npm run install:deps && npm run install:frontend && npm run install:backend",
    "install:deps": "npm install",
    "install:frontend": "cd frontend-microservice && npm install",
    "install:backend": "npm run install:gateway && npm run install:auth && npm run install:course && npm run install:profile && npm run install:rating && npm run install:media && npm run install:notification",
    "install:gateway": "cd microservices/api-gateway && npm install",
    "install:auth": "cd microservices/auth-service && npm install",
    "install:course": "cd microservices/course-service && npm install",
    "install:profile": "cd microservices/profile-service && npm install",
    "install:rating": "cd microservices/rating-service && npm install",
    "install:media": "cd microservices/media-service && npm install",
    "install:notification": "cd microservices/notification-service && npm install",
    "dev:frontend": "cd frontend-microservice && npm run dev",
    "dev:gateway": "cd microservices/api-gateway && npm start",
    "dev:auth": "cd microservices/auth-service && npm start",
    "dev:course": "cd microservices/course-service && npm start",
    "dev:profile": "cd microservices/profile-service && npm start",
    "dev:rating": "cd microservices/rating-service && npm start",
    "dev:media": "cd microservices/media-service && npm start",
    "dev:notification": "cd microservices/notification-service && npm start",
    "dev:backend": "concurrently -n \"gateway,auth,course,profile,rating,media,notification\" -c \"bgGreen,bgYellow,bgMagenta,bgRed,bgBlue,bgWhite,bgGray\" \"npm run dev:gateway\" \"npm run dev:auth\" \"npm run dev:course\" \"npm run dev:profile\" \"npm run dev:rating\" \"npm run dev:media\" \"npm run dev:notification\"",
    "dev:all": "concurrently -n \"frontend,backend\" -c \"bgBlue,bgGreen\" \"npm run dev:frontend\" \"npm run dev:backend\"",
    "start": "npm run dev:all",
    "build:frontend": "cd frontend-microservice && npm run build",
    "build:gateway": "cd microservices/api-gateway && npm run build",
    "build:auth": "cd microservices/auth-service && npm run build",
    "build:course": "cd microservices/course-service && npm run build",
    "build:profile": "cd microservices/profile-service && npm run build",
    "build:rating": "cd microservices/rating-service && npm run build",
    "build:media": "cd microservices/media-service && npm run build",
    "build:notification": "cd microservices/notification-service && npm run build",
    "build:backend": "npm run build:gateway && npm run build:auth && npm run build:course && npm run build:profile && npm run build:rating && npm run build:media && npm run build:notification",
    "build:all": "npm run build:frontend && npm run build:backend",
    "build": "npm run build:all",
    "test:frontend": "cd frontend-microservice && npm run test:safe || exit 0",
    "test:gateway": "cd microservices/api-gateway && npm run test:safe || exit 0",
    "test:auth": "cd microservices/auth-service && npm run test:safe || exit 0",
    "test:course": "cd microservices/course-service && npm run test:safe || exit 0",
    "test:profile": "cd microservices/profile-service && npm run test:safe || exit 0",
    "test:rating": "cd microservices/rating-service && npm run test:safe || exit 0",
    "test:media": "cd microservices/media-service && npm run test:safe || exit 0",
    "test:notification": "cd microservices/notification-service && npm run test:safe || exit 0",
    "test:backend": "npm run test:gateway && npm run test:auth && npm run test:course && npm run test:profile && npm run test:rating && npm run test:media && npm run test:notification",
    "test:all": "npm run test:frontend && npm run test:backend",
    "test": "npm run test:all",
    "test:watch": "concurrently -n \"frontend,backend\" -c \"bgBlue,bgGreen\" \"cd frontend-microservice && npm run test:watch\" \"npm run test:backend:watch\"",
    "test:backend:watch": "concurrently -n \"gateway,auth,course,profile,rating,media,notification\" -c \"bgGreen,bgYellow,bgMagenta,bgRed,bgBlue,bgWhite,bgGray\" \"cd microservices/api-gateway && npm run test:watch\" \"cd microservices/auth-service && npm run test:watch\" \"cd microservices/course-service && npm run test:watch\" \"cd microservices/profile-service && npm run test:watch\" \"cd microservices/rating-service && npm run test:watch\" \"cd microservices/media-service && npm run test:watch\" \"cd microservices/notification-service && npm run test:watch\"",
    "test:coverage": "npm run test:frontend:coverage && npm run test:backend:coverage",
    "test:frontend:coverage": "cd frontend-microservice && npm run test:coverage || exit 0",
    "test:backend:coverage": "npm run test:gateway:coverage && npm run test:auth:coverage && npm run test:course:coverage && npm run test:profile:coverage && npm run test:rating:coverage && npm run test:media:coverage && npm run test:notification:coverage",
    "test:gateway:coverage": "cd microservices/api-gateway && npm run test:coverage || exit 0",
    "test:auth:coverage": "cd microservices/auth-service && npm run test:coverage || exit 0",
    "test:course:coverage": "cd microservices/course-service && npm run test:coverage || exit 0",
    "test:profile:coverage": "cd microservices/profile-service && npm run test:coverage || exit 0",
    "test:rating:coverage": "cd microservices/rating-service && npm run test:coverage || exit 0",
    "test:media:coverage": "cd microservices/media-service && npm run test:coverage || exit 0",
    "test:notification:coverage": "cd microservices/notification-service && npm run test:coverage || exit 0",
    "lint:frontend": "cd frontend-microservice && npm run lint || exit 0",
    "lint:gateway": "cd microservices/api-gateway && npm run lint || exit 0",
    "lint:auth": "cd microservices/auth-service && npm run lint || exit 0",
    "lint:course": "cd microservices/course-service && npm run lint || exit 0",
    "lint:profile": "cd microservices/profile-service && npm run lint || exit 0",
    "lint:rating": "cd microservices/rating-service && npm run lint || exit 0",
    "lint:media": "cd microservices/media-service && npm run lint || exit 0",
    "lint:notification": "cd microservices/notification-service && npm run lint || exit 0",
    "lint:backend": "npm run lint:gateway && npm run lint:auth && npm run lint:course && npm run lint:profile && npm run lint:rating && npm run lint:media && npm run lint:notification",
    "lint:all": "npm run lint:frontend && npm run lint:backend",
    "lint": "npm run lint:all",
    "lint:fix": "npm run lint:fix:frontend && npm run lint:fix:backend",
    "lint:fix:frontend": "cd frontend-microservice && npm run lint:fix || exit 0",
    "lint:fix:backend": "npm run lint:fix:gateway && npm run lint:fix:auth && npm run lint:fix:course && npm run lint:fix:profile && npm run lint:fix:rating && npm run lint:fix:media && npm run lint:fix:notification",
    "lint:fix:gateway": "cd microservices/api-gateway && npm run lint:fix || exit 0",
    "lint:fix:auth": "cd microservices/auth-service && npm run lint:fix || exit 0",
    "lint:fix:course": "cd microservices/course-service && npm run lint:fix || exit 0",
    "lint:fix:profile": "cd microservices/profile-service && npm run lint:fix || exit 0",
    "lint:fix:rating": "cd microservices/rating-service && npm run lint:fix || exit 0",
    "lint:fix:media": "cd microservices/media-service && npm run lint:fix || exit 0",
    "lint:fix:notification": "cd microservices/notification-service && npm run lint:fix || exit 0",
    "format": "npm run format:frontend && npm run format:backend",
    "format:frontend": "cd frontend-microservice && npm run format || exit 0",
    "format:backend": "npm run format:gateway && npm run format:auth && npm run format:course && npm run format:profile && npm run format:rating && npm run format:media && npm run format:notification",
    "format:gateway": "cd microservices/api-gateway && npm run format || exit 0",
    "format:auth": "cd microservices/auth-service && npm run format || exit 0",
    "format:course": "cd microservices/course-service && npm run format || exit 0",
    "format:payment": "cd microservices/payment-service && npm run format || exit 0",
    "format:profile": "cd microservices/profile-service && npm run format || exit 0",
    "format:rating": "cd microservices/rating-service && npm run format || exit 0",
    "format:media": "cd microservices/media-service && npm run format || exit 0",
    "format:notification": "cd microservices/notification-service && npm run format || exit 0",
    "type-check": "npm run type-check:frontend",
    "type-check:frontend": "cd frontend-microservice && npm run type-check || exit 0",
    "validate": "npm run lint && npm run type-check && npm run test",
    "clean": "npm run clean:frontend && npm run clean:backend && npm run clean:deps",
    "clean:frontend": "cd frontend-microservice && npm run clean || rm -rf dist node_modules",
    "clean:backend": "npm run clean:gateway && npm run clean:auth && npm run clean:course && npm run clean:payment && npm run clean:profile && npm run clean:rating && npm run clean:media && npm run clean:notification",
    "clean:gateway": "cd microservices/api-gateway && npm run clean || rm -rf dist node_modules",
    "clean:auth": "cd microservices/auth-service && npm run clean || rm -rf dist node_modules",
    "clean:course": "cd microservices/course-service && npm run clean || rm -rf dist node_modules",
    "clean:payment": "cd microservices/payment-service && npm run clean || rm -rf dist node_modules",
    "clean:profile": "cd microservices/profile-service && npm run clean || rm -rf dist node_modules",
    "clean:rating": "cd microservices/rating-service && npm run clean || rm -rf dist node_modules",
    "clean:media": "cd microservices/media-service && npm run clean || rm -rf dist node_modules",
    "clean:notification": "cd microservices/notification-service && npm run clean || rm -rf dist node_modules",
    "clean:deps": "rm -rf node_modules package-lock.json",
    "reset": "npm run clean && npm run install:all",
    "docker:build": "docker-compose -f microservices/docker-compose.yml build",
    "docker:up": "docker-compose -f microservices/docker-compose.yml up -d",
    "docker:down": "docker-compose -f microservices/docker-compose.yml down",
    "docker:logs": "docker-compose -f microservices/docker-compose.yml logs -f",
    "docker:clean": "docker-compose -f microservices/docker-compose.yml down -v --rmi all",
    "k8s:deploy": "kubectl apply -f microservices/k8s/",
    "k8s:delete": "kubectl delete -f microservices/k8s/",
    "k8s:status": "kubectl get pods -n studynotion",
    "k8s:logs": "kubectl logs -f -n studynotion",
    "health:check": "curl -f http://localhost:3000/health || exit 0",
    "health:frontend": "curl -f http://localhost:3008 || exit 0",
    "health:all": "npm run health:check && npm run health:frontend",
    "security:audit": "npm audit --audit-level=moderate || exit 0",
    "security:fix": "npm audit fix || exit 0",
    "deps:update": "npm update && npm run install:all",
    "deps:outdated": "npm outdated || exit 0",
    "legacy:start": "cd monolithic-legacy && npm start",
    "legacy:server": "cd monolithic-legacy/server && npm run dev",
    "legacy:dev": "cd monolithic-legacy && npm run dev"
  },
  "workspaces": [
    "frontend-microservice",
    "microservices/api-gateway",
    "microservices/auth-service",
    "microservices/course-service",
    "microservices/payment-service",
    "microservices/profile-service",
    "microservices/rating-service",
    "microservices/media-service",
    "microservices/notification-service"
  ],
  "devDependencies": {
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "nodemon": "^3.0.2",
    "wait-on": "^7.2.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^5.0.5",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0",
    "commitizen": "^4.3.0",
    "cz-conventional-changelog": "^3.3.0",
    "@commitlint/cli": "^18.4.3",
    "@commitlint/config-conventional": "^18.4.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [
    "microservices",
    "edtech",
    "studynotion",
    "react",
    "nodejs",
    "mongodb",
    "kubernetes",
    "docker",
    "typescript",
    "testing",
    "linting"
  ],
  "author": "StudyNotion Team",
  "license": "MIT",
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  }
}
