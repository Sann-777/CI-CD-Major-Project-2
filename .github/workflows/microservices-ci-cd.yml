# name: StudyNotion Microservices CI/CD

# on:
#   push:
#     branches: [ main, develop ]
#     paths:
#       - 'microservices/**'
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'microservices/**'

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: studynotion

# jobs:
#   # Test all services
#   test:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [auth-service, course-service, payment-service, api-gateway]
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'
#         cache: 'npm'
#         cache-dependency-path: microservices/${{ matrix.service }}/package-lock.json
    
#     - name: Install dependencies
#       run: |
#         cd microservices/${{ matrix.service }}
#         npm ci
    
#     - name: Run tests
#       run: |
#         cd microservices/${{ matrix.service }}
#         npm test
    
#     - name: Run linting
#       run: |
#         cd microservices/${{ matrix.service }}
#         npm run lint || true

#   # Build and push Docker images
#   build-and-push:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     strategy:
#       matrix:
#         service: [auth-service, course-service, payment-service, api-gateway]
    
#     permissions:
#       contents: read
#       packages: write
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Log in to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
    
#     - name: Extract metadata
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
#         tags: |
#           type=ref,event=branch
#           type=ref,event=pr
#           type=sha,prefix={{branch}}-
#           type=raw,value=latest,enable={{is_default_branch}}
    
#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./microservices/${{ matrix.service }}
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max

#   # Deploy to staging
#   deploy-staging:
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/develop'
#     environment: staging
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Deploy to staging
#       run: |
#         echo "Deploying to staging environment..."
#         # Add your staging deployment commands here
#         # Example: kubectl apply -f k8s/staging/
    
#   # Deploy to production
#   deploy-production:
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     environment: production
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Deploy to production
#       run: |
#         echo "Deploying to production environment..."
#         # Add your production deployment commands here
#         # Example: kubectl apply -f k8s/production/

#   # Security scanning
#   security-scan:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     if: github.event_name == 'push'
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Run Trivy vulnerability scanner
#       uses: aquasecurity/trivy-action@master
#       with:
#         image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/auth-service:latest
#         format: 'sarif'
#         output: 'trivy-results.sarif'
    
#     - name: Upload Trivy scan results
#       uses: github/codeql-action/upload-sarif@v2
#       if: always()
#       with:
#         sarif_file: 'trivy-results.sarif'
